library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

entity control_generator is
  GENERIC(
  	Ha : INTEGER := 96;             --Hpulse
  	Hb : INTEGER := 144;            --Hpulse+HBP
  	Hc : INTEGER := 784;            --Hpulse+HBP+Hactive
  	Hd : INTEGER := 800;            --Hpulse+HBP+Hactive+HFP
  	Va : INTEGER := 2;              --Vpulse
  	Vb : INTEGER := 35;             --Vpulse+VBP
  	Vc : INTEGER := 515;            --Vpulse+VBP+Vactive
  	Vd : INTEGER := 525;           --Vpulse+VBP+Vactive+VFP
    Hs:integer:=200;--start H
    Vs:integer:=200;--start V
    He:integer:=300;--length H
    Ve:integer:=300);--length V
  port (
  clk25:in std_logic;
  din:in std_logic_vector(9 downto 0);
  Hsync   : BUFFER STD_LOGIC;     --Horizontal sync
	Vsync   : OUT    STD_LOGIC;     --Vertical sync
	Hactive : BUFFER STD_LOGIC;     --Active portion of Hsync
  Hactive_mini : BUFFER STD_LOGIC;
	Vactive: BUFFER STD_LOGIC;     --Active portion of Vsync
  Vactive_mini : BUFFER STD_LOGIC;     --Active portion of Vsync
	dena_main   : buffer    STD_LOGIC;
  dena_mini    : buffer    STD_LOGIC;
  err: buffer std_logic           --no Hsync
  );
end entity;

architecture arch of control_generator is
begin
  cntl : process(clk25)
  begin
    if din="1101010100" then --v0 h0
      Vsync<='0';
      Hsync<='0';
    elsif din="0010101011" then--01
      Vsync<='0';
      Hsync<='1';
    elsif din="0101010100" then--10
      Vsync<='1';
      Hsync<='0';
    elsif din="1010101011" then--OTHERS(11)
      Vsync<='1';
      Hsync<='1';
    else
      Vsync<='1';
      Hsync<='1';
    end if;
  end process;

  PROCESS(clk25)
  	VARIABLE Hcount : INTEGER RANGE 0 TO Hd;
  BEGIN
  	IF (clk25'EVENT AND clk25 = '1') THEN
      if Hsync='1' THEN
  		  Hcount := Hcount + 1;
          if  (Hcount = Hb-Ha) THEN
      		  Hactive <= '1';
          ELSIF (Hcount = Hc-Ha+Hs) THEN
            Hactive_mini<='1';
          ELSIF (Hcount = Hc-Ha+He) THEN
            Hactive_mini<='0';
      		ELSIF (Hcount = Hc-Ha) THEN
      			Hactive <= '0';
      		ELSIF (Hcount = Hd-Ha) THEN
      			Hsync  <= '0';
      			Hcount := 0;
      		END IF;
      END IF;
    end if;
  END PROCESS;
  -----Vertical signals generation:------
  PROCESS(Hsync)
  	VARIABLE Vcount : INTEGER RANGE 0 TO Vd;
  BEGIN
  	IF (Hsync'EVENT AND Hsync = '0') THEN
  		Vcount := Vcount + 1;
  		IF (Vcount = Va) THEN
  			Vsync <= '1';
  		ELSIF (Vcount = Vb) THEN
  			Vactive <= '1';
      ELSIF (Vcount = Vb+Vs) THEN
    			Vactive_mini <= '1';
      ELSIF (Vcount = Vb+Ve) THEN
        	Vactive_mini <= '0';
  		ELSIF (Vcount = Vc) THEN
  			Vactive <= '0';
  		ELSIF (Vcount = Vd) THEN
  			Vsync  <= '0';
  			Vcount := 0;
  		END IF;
  	END IF;
  END PROCESS;
  -----Display-enable generation:--------
  dena_main <= Hactive AND Vactive;
  dena_mini<=Hactive_mini AND Vactive_mini;
  process(clk25)
  variable count:integer:=0;
  BEGIN
    if dena_main='0' then
      count:=count+1;
      if count=9999999 THEN
        err<='1';
      elsif count=10000000 then
        err<='0';
        count:=0;
      end if;
    end if;
  end process;
end architecture;
-----Control generator:--------------------------------------

--IF (control = "00") THEN
--  dout <= "1101010100";
--ELSIF (control = "01") THEN
--  dout <= "0010101011";
--ELSIF (control = "10") THEN
--  dout <= "0101010100";
--ELSE
--  dout <= "1010101011";
--END IF;
--control0  <= Vsync & Hsync;
--control1  <= "00";
--control2  <= "00";
