library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

entity intervention is
  port (
  i_tmds0a,i_tmds0b,i_tmds1a,i_tmds1b,i_tmds2a,i_tmds2b,i_tmds_CLKa,i_tmds_CLKb: in std_logic;
  o_tmds0a,o_tmds0b,o_tmds1a,o_tmds1b,o_tmds2a,o_tmds2b,o_tmds_CLKa,o_tmds_CLKb: buffer std_logic
  );
end entity;

architecture arch of intervention is
  ------standart components------
  -----Signal declarations:--------------
	--SIGNAL clk25, clk250                        : STD_LOGIC;
	--SIGNAL Hsync, Vsync, Hactive, Vactive, dena : STD_LOGIC;
	--SIGNAL R, G, B                              : STD_LOGIC_VECTOR(7 DOWNTO 0);
	--SIGNAL control0, control1, control2         : STD_LOGIC_VECTOR(1 DOWNTO 0);
	--SIGNAL data0, data1, data2                  : STD_LOGIC_VECTOR(9 DOWNTO 0);
	-----1st component declaration:--------
	-----2nd component declaration:--------
	-----3rd component declaration:--------
	COMPONENT tmds_encoder IS
		PORT(
			din     : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
			control : IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
			clk25   : IN  STD_LOGIC;
			dena    : IN  STD_LOGIC;
			dout    : OUT STD_LOGIC_VECTOR(9 DOWNTO 0));
	END COMPONENT;
	-----4th component declaration:--------
	COMPONENT serializer IS
		PORT(
			clk250 : IN  STD_LOGIC;
			din    : IN  STD_LOGIC_VECTOR(9 DOWNTO 0);
			dout   : BUFFER STD_LOGIC);
	END COMPONENT;
	---------------------------------------

  component control_generator
generic (
  Ha : INTEGER := 96;
  Hb : INTEGER := 144;
  Hc : INTEGER := 784;
  Hd : INTEGER := 800;
  Va : INTEGER := 2;
  Vb : INTEGER := 35;
  Vc : INTEGER := 515;
  Vd : INTEGER := 525;
  Hs : integer := 200;
  Vs : integer := 200;
  He : integer := 300;
  Ve : integer := 300
);
port (
  clk25        : in  std_logic;
  din          : in  std_logic_vector(9 downto 0);
  Hsync        : BUFFER STD_LOGIC;
  Vsync        : OUT STD_LOGIC;
  Hactive      : BUFFER STD_LOGIC;
  Hactive_mini : BUFFER STD_LOGIC;
  Vactive      : BUFFER STD_LOGIC;
  Vactive_mini : BUFFER STD_LOGIC;
  dena_main    : buffer STD_LOGIC;
  dena_mini    : buffer STD_LOGIC;
  err          : buffer std_logic
);
end component control_generator;

  component antiserializer
port (
  clk250 : in  std_logic;
  err    : buffer  std_logic;
  din    : in  std_logic;
  dout   : out std_logic_vector(9 downto 0)
);
end component antiserializer;

  component pll25to250
  PORT (
  inclk0:in std_logic;
  c0:out std_logic; ---25
  c1:out std_logic ---250
  );
  end component;

  Signal clk25:std_logic;
  signal clk250:std_logic;
  signal err:std_logic;
  signal Hsync,Vsync,Hactive,Vactive,Hactive_mini,Vactive_mini:std_logic;
  signal dena_main,dena_mini:std_logic;
  SIGNAL R, G, B                              : STD_LOGIC_VECTOR(7 DOWNTO 0);
  SIGNAL control0, control1, control2         : STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL data0, data1, data2                  : STD_LOGIC_VECTOR(9 DOWNTO 0);
  SIGNAL new_data0, new_data1, new_data2                  : STD_LOGIC_VECTOR(9 DOWNTO 0);
  SIGNAL sw_data0, sw_data1, sw_data2                  : STD_LOGIC_VECTOR(9 DOWNTO 0);
------standart components------


begin
process(clk250)
begin
  if (dena_mini='1') THEN
    sw_data0<=data0;
    sw_data1<=data1;
    sw_data2<=data2;                  --
  else
    sw_data0 <= new_data0;
    sw_data1 <= new_data1;
    sw_data2 <= new_data2;
  end if;
end process;
  control0  <= Vsync & Hsync;
	control1  <= "00";
	control2  <= "00";
pll :pll25to250 port map(i_tmds_CLKa,clk25,clk250);

control_0:control_generator port map(clk25,data0,Hsync,Vsync,Hactive,Hactive_mini,Vactive,Vactive_mini,dena_main,dena_mini,err);
aser_0:antiserializer port map(clk250,err,i_tmds0a,data0);
tmds0 : tmds_encoder PORT MAP("11110011", control0, clk25, dena_mini, new_data0);
serial0 : serializer PORT MAP(clk250, sw_data0, o_tmds0a);

aser_1:antiserializer port map(clk250,err,i_tmds1a,data1);
tmds1 : tmds_encoder PORT MAP("10010011", control1, clk25, dena_mini, new_data1);
serial1 : serializer PORT MAP(clk250, sw_data1, o_tmds1a);

aser_2:antiserializer port map(clk250,err,i_tmds2a,data2);
tmds2 : tmds_encoder PORT MAP("10011011", control2, clk25, dena_mini, new_data2);
serial2 : serializer PORT MAP(clk250, sw_data2, o_tmds2a);
o_tmds0b    <= NOT o_tmds0a;
o_tmds1b    <= NOT o_tmds1a;
o_tmds2b    <= NOT o_tmds2a;
o_tmds_clkb <= NOT o_tmds_clka;
end architecture;



-----TMDS encoder:------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
------------------------------------------------------------------
ENTITY tmds_encoder IS
	PORT(
		din     : IN  STD_LOGIC_VECTOR(7 DOWNTO 0); --pixel data
		control : IN  STD_LOGIC_VECTOR(1 DOWNTO 0); --control data
		clk25   : IN  STD_LOGIC;        --clock
		dena    : IN  STD_LOGIC;        --display enable
		dout    : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)); --output data
END tmds_encoder;
------------------------------------------------------------------
ARCHITECTURE tmds_encoder OF tmds_encoder IS
	SIGNAL x     : STD_LOGIC_VECTOR(8 DOWNTO 0); --internal vector
	SIGNAL onesX : INTEGER RANGE 0 TO 8; --# of '1's in x
	SIGNAL onesD : INTEGER RANGE 0 TO 8; --# of '1's in din
	SIGNAL disp  : INTEGER RANGE -16 TO 15; --disparity
BEGIN
	-----Computes number of '1's in din:--------
	PROCESS(din)
		VARIABLE counterD : INTEGER RANGE 0 TO 8;
	BEGIN
		counterD := 0;
		FOR i IN 0 TO 7 LOOP
			IF (din(i) = '1') THEN
				counterD := counterD + 1;
			END IF;
		END LOOP;
		onesD    <= counterD;
	END PROCESS;
	-----Produces the internal vector x:-------
	PROCESS(din, onesD)
	BEGIN
		x(0) <= din(0);
		IF (onesD > 4 OR (onesD = 4 AND din(0) = '0')) THEN
			x(1) <= din(1) XNOR x(0);
			x(2) <= din(2) XNOR x(1);
			x(3) <= din(3) XNOR x(2);
			x(4) <= din(4) XNOR x(3);
			x(5) <= din(5) XNOR x(4);
			x(6) <= din(6) XNOR x(5);
			x(7) <= din(7) XNOR x(6);
			x(8) <= '0';
		ELSE
			x(1) <= din(1) XOR x(0);
			x(2) <= din(2) XOR x(1);
			x(3) <= din(3) XOR x(2);
			x(4) <= din(4) XOR x(3);
			x(5) <= din(5) XOR x(4);
			x(6) <= din(6) XOR x(5);
			x(7) <= din(7) XOR x(6);
			x(8) <= '1';
		END IF;
	END PROCESS;
	-----Computes the number of '1's in x:-----
	PROCESS(x)
		VARIABLE counterX : INTEGER RANGE 0 TO 8;
	BEGIN
		counterX := 0;
		FOR i IN 0 TO 7 LOOP
			IF (x(i) = '1') THEN
				counterX := counterX + 1;
			END IF;
		END LOOP;
		onesX    <= counterX;
	END PROCESS;
	-----Produces output vector and new disparity:--
	PROCESS(disp, x, onesX, dena, control, clk25)
		VARIABLE disp_new : INTEGER RANGE -31 TO 31;
	BEGIN
		IF (dena = '1') THEN
			dout(8) <= x(8);
			IF (disp = 0 OR onesX = 4) THEN
				dout(9) <= NOT x(8);
				IF (x(8) = '0') THEN
					dout(7 DOWNTO 0) <= NOT x(7 DOWNTO 0);
					disp_new         := disp - 2 * onesX + 8;
				ELSE
					dout(7 DOWNTO 0) <= x(7 DOWNTO 0);
					disp_new         := disp + 2 * onesX - 8;
				END IF;
			ELSE
				IF ((disp > 0 AND onesX > 4) OR (disp < 0 AND onesX < 4)) THEN
					dout(9)          <= '1';
					dout(7 DOWNTO 0) <= NOT x(7 DOWNTO 0);
					IF (x(8) = '0') THEN
						disp_new := disp - 2 * onesX + 8;
					ELSE
						disp_new := disp - 2 * onesX + 10;
					END IF;
				ELSE
					dout(9)          <= '0';
					dout(7 DOWNTO 0) <= x(7 DOWNTO 0);
					IF (x(8) = '0') THEN
						disp_new := disp + 2 * onesX - 10;
					ELSE
						disp_new := disp + 2 * onesX - 8;
					END IF;
				END IF;
			END IF;
		ELSE
			disp_new := 0;
			IF (control = "00") THEN
				dout <= "1101010100";
			ELSIF (control = "01") THEN
				dout <= "0010101011";
			ELSIF (control = "10") THEN
				dout <= "0101010100";
			ELSE
				dout <= "1010101011";
			END IF;
		END IF;
		IF (clk25'EVENT AND clk25 = '1') THEN
			disp <= disp_new;
		END IF;
	END PROCESS;
END tmds_encoder;
------------------------------------------------------------------

-----Serializer:---------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;
-------------------------------------------------
ENTITY serializer IS
	PORT(clk250 : IN  STD_LOGIC;
	     din    : IN  STD_LOGIC_VECTOR(9 DOWNTO 0);
	     dout   : OUT STD_LOGIC);
END serializer;
-------------------------------------------------
ARCHITECTURE serializer OF serializer IS
	SIGNAL internal : STD_LOGIC_VECTOR(9 DOWNTO 0);
BEGIN
	PROCESS(clk250)
		VARIABLE count : INTEGER RANGE 0 TO 10;
	BEGIN
		IF (clk250'EVENT AND clk250 = '1') THEN
			count := count + 1;
			IF (count = 9) THEN
				internal <= din;
			ELSIF (count = 10) THEN
				count := 0;
			END IF;
			dout  <= internal(count);
		END IF;
	END PROCESS;
END serializer;
-------------------------------------------------
